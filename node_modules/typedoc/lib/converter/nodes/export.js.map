{"version":3,"file":"export.js","sourceRoot":"","sources":["../../../src/lib/converter/nodes/export.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,sBAAgF,oBAAoB,CAAC,CAAA;AAErG,2BAAgD,eAAe,CAAC,CAAA;AAIhE;IAAqC,mCAA2C;IAAhF;QAAqC,8BAA2C;QAK5E,aAAQ,GAAmB;YACvB,GAA8B;SACjC,CAAC;IAkCN,CAAC;IA/BG,iCAAO,GAAP,UAAQ,OAAe,EAAE,IAAwB;QAC7C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;QACzB,CAAC;QAED,IAAI,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACtB,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAC9B,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,WAAW;gBACzC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC;oBAAC,MAAM,CAAC;gBAChC,IAAI,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;oBAAC,MAAM,CAAC;gBAEhB,IAAI,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;gBACzC,EAAE,CAAC,CAAC,UAAU,YAAY,6BAAqB,CAAC,CAAC,CAAC;oBACtB,UAAW,CAAC,OAAO,CAAC,sBAAc,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;gBACvF,CAAC;gBACD,cAAc,CAAC,UAAU,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC;QAED,wBAAwB,UAAqB;YACzC,EAAE,CAAC,CAAC,UAAU,YAAY,6BAAqB,CAAC,CAAC,CAAC;gBACtB,UAAW,CAAC,OAAO,CAAC,sBAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC/E,CAAC;YAED,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IAzCL;QAAC,sBAAS,CAAC,EAAC,IAAI,EAAC,aAAa,EAAC,CAAC;uBAAA;IA0ChC,sBAAC;AAAD,CAAC,AAzCD,CAAqC,mCAAsB,GAyC1D;AAzCY,uBAAe,kBAyC3B,CAAA","sourcesContent":["import * as ts from \"typescript\";\n\nimport {Reflection, ReflectionKind, ReflectionFlag, DeclarationReflection} from \"../../models/index\";\nimport {Context} from \"../context\";\nimport {Component, ConverterNodeComponent} from \"../components\";\n\n\n@Component({name:'node:export'})\nexport class ExportConverter extends ConverterNodeComponent<ts.ExportAssignment>\n{\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports:ts.SyntaxKind[] = [\n        ts.SyntaxKind.ExportAssignment\n    ];\n\n\n    convert(context:Context, node:ts.ExportAssignment):Reflection {\n        if (!node.isExportEquals) {\n            return context.scope;\n        }\n\n        var type = context.getTypeAtLocation(node.expression);\n        if (type && type.symbol) {\n            var project = context.project;\n            type.symbol.declarations.forEach((declaration) => {\n                if (!declaration.symbol) return;\n                var id = project.symbolMapping[context.getSymbolID(declaration.symbol)];\n                if (!id) return;\n\n                var reflection = project.reflections[id];\n                if (reflection instanceof DeclarationReflection) {\n                    (<DeclarationReflection>reflection).setFlag(ReflectionFlag.ExportAssignment, true);\n                }\n                markAsExported(reflection);\n            });\n        }\n\n        function markAsExported(reflection:Reflection) {\n            if (reflection instanceof DeclarationReflection) {\n                (<DeclarationReflection>reflection).setFlag(ReflectionFlag.Exported, true);\n            }\n\n            reflection.traverse(markAsExported);\n        }\n\n        return context.scope;\n    }\n}\n"]}